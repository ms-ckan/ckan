import logging
from urllib import urlencode
import datetime

from pylons import config
from genshi.template import MarkupTemplate
from genshi.template.text import NewTextTemplate
from paste.deploy.converters import asbool

import ckan.logic as logic
import ckan.lib.base as base
import ckan.lib.maintain as maintain
import ckan.lib.package_saver as package_saver
import ckan.lib.i18n as i18n
import ckan.lib.navl.dictization_functions as dict_fns
import ckan.lib.accept as accept
import ckan.lib.helpers as h
import ckan.model as model
import ckan.lib.datapreview as datapreview
import ckan.lib.plugins
import ckan.plugins as p

from ckan.common import OrderedDict, _, json, request, c, g, response
from home import CACHE_PARAMETERS

log = logging.getLogger(__name__)

render = base.render
abort = base.abort
redirect = base.redirect

NotFound = logic.NotFound
NotAuthorized = logic.NotAuthorized
ValidationError = logic.ValidationError
check_access = logic.check_access
get_action = logic.get_action
tuplize_dict = logic.tuplize_dict
clean_dict = logic.clean_dict
parse_params = logic.parse_params
flatten_to_string_key = logic.flatten_to_string_key   
lookup_package_plugin = ckan.lib.plugins.lookup_package_plugin 


ajax读取数据的方式



def read_ajax(self, id, revision=None):
        package_type = self._get_package_type(id)
        context = {'model': model, 'session': model.Session,
                   'user': c.user or c.author, 'auth_user_obj': c.userobj,
                   'revision_id': revision}
        try:
            data = get_action('package_show')(context, {'id': id})
        except NotAuthorized:
            abort(401, _('Unauthorized to read package %s') % '')
        except NotFound:
            abort(404, _('Dataset not found'))

        data.pop('tags')
        data = flatten_to_string_key(data)
        response.headers['Content-Type'] = 'application/json;charset=utf-8'
        return h.json.dumps(data)

    def history_ajax(self, id):

        context = {'model': model, 'session': model.Session,
                   'user': c.user or c.author, 'auth_user_obj': c.userobj}
        data_dict = {'id': id}
        try:
            pkg_revisions = get_action('package_revision_list')(
                context, data_dict)
        except NotAuthorized:
            abort(401, _('Unauthorized to read package %s') % '')
        except NotFound:
            abort(404, _('Dataset not found'))

        data = []
        approved = False
        for num, revision in enumerate(pkg_revisions):
            if not approved and revision['approved_timestamp']:
                current_approved, approved = True, True
            else:
                current_approved = False

            data.append({'revision_id': revision['id'],
                         'message': revision['message'],
                         'timestamp': revision['timestamp'],
                         'author': revision['author'],
                         'approved': bool(revision['approved_timestamp']),
                         'current_approved': current_approved})

        response.headers['Content-Type'] = 'application/json;charset=utf-8'
        return h.json.dumps(data)



// 创建数据库的语法

CREATE TABLE "dce5aa30-2c0f-4f91-9d3e-96b7f9f65c02"
(
  _id serial NOT NULL,
  _full_text tsvector,
  "RECORD ID" text,
  "RECORD NAME" text,
  "DATE OPENED" text,
  "RECORD MODULE" text,
  "RECORD STATUS" text,
  "RECORD STATUS DATE" text,
  "RECORD TYPE" text,
  "ADDRESS" text,
  "BALANCE DUE" text,
  "DATE ASSIGNED" text,
  "DATE CLOSED" text,
  "DATE COMPLETED" text,
  "DATE STATUSED" text,
  "DESCRIPTION" text,
  "JOB VALUE" text,
  "RECORD TYPE GROUP" text,
  "RECORD TYPE CATEGORY" text,
  "RECORD TYPE TYPE" text,
  "RECORD TYPE SUBTYPE" text,
  "SHORT NOTES" text,
  "STATUS" text,
  "TEMPLATE ID" text,
  "APN" text,
  "LICENSE NBR" text,
  "BUSINESS NAME" text,
  CONSTRAINT "dce5aa30-2c0f-4f91-9d3e-96b7f9f65c02_pkey" PRIMARY KEY (_id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE "dce5aa30-2c0f-4f91-9d3e-96b7f9f65c02"
  OWNER TO datastoreuser;
GRANT ALL ON TABLE "dce5aa30-2c0f-4f91-9d3e-96b7f9f65c02" TO datastoreuser;
GRANT SELECT ON TABLE "dce5aa30-2c0f-4f91-9d3e-96b7f9f65c02" TO datastoreuserread;