MongoDB Tutorial

官网：http://www.mongodb.org/
教程：http://www.yiibai.com/mongodb/
教程：http://www.w3cschool.cc/mongodb/

一、安装与启动服务

1、MongoDB提供了linux平台上32位和64位的安装包，你可以在官网下载安装包。下载地址：http://www.mongodb.org/downloads

注意：32位的只能使用2G大小，64位无限制。

2. 下载完成后，将压缩包解压即可。

3. 创建数据库目录

    1）在根目录下创建(/data)目录
    2）创建默认数据库目录(/data/db)

4. 启动MongoDB服务

$ sudo ./mongodb/bin/mongod

5. MongoDB后台管理 Shell

$ sudo ./mongodb/bin/mongo

MongoDB Shell是MongoDB自带的交互式Javascript shell,用来对MongoDB进行操作和管理的交互式环境。默认会连接到test文档（数据库）


二、数据库、对象、集合

1、数据库

一个mongodb中可以建立多个数据库。

MongoDB的默认数据库为"db"，该数据库存储在data目录中。

在MongoDB中可以创建数据库，如果你想使用MongoDB，创建数据库不是必要的。

"show dbs" 命令可以显示所有数据的列表。

执行 "db" 命令可以显示当前数据库对象或者集合。

运行"use"命令，可以连接到一个指定的数据库。

2、文档

文档是mongodb中的最核心的概念，是其核心单元，我们可以将文档类比成关系型数据库中的每一行数据。

多个键及其关联的值有序的放置在一起就是文档。在mongodb中使用一种类json的bson存储数据。

bson数据可以理解为在json的基础上添加了一些json中没有的数据类型。

下表为MongoDB中常用的几种数据类型。

string（字符串）	可以是一个空字符串或者字符组合。
integer（整型）	整数。
boolean（布尔型）	逻辑值 True 或者 False。
double	双精度浮点型
null	不是0，也不是空。
array	数组：一系列值
object	对象型，程序中被使用的实体。可以是一个值，变量，函数，或者数据结构。
timestamp	timestamp存储为64为的值，只运行一个mongod时可以确保是唯一的。前32位保存的是UTC时间，单位是秒，后32为是在这一秒内的计数值，从0开始，每新建一个MongoTimestamp对象就加一。
Internationalized Strings	UTF-8 字符串。
Object IDs	在mongodb中的文档需要使用唯一的关键字_id来标识他们。几乎每一个mongodb文档都使用_id字段作为第一个属性（在系统集合和定容量集合（capped collection）中有一些例外）。_id值可以是任何类型，最常见的做法是使用ObjectId类型。

3. 集合

集合就是一组文档的组合。如果将文档类比成数据库中的行，那么集合就可以类比成数据库的表。

在mongodb中的集合是无模式的，也就是说集合中存储的文档的结构可以是不同的，比如下面的两个文档可以同时存入到一个集合中：

{"name":"mengxiangyue"} {"Name":"mengxiangyue","sex":"nan"}
当第一个文档插入时，集合就会被创建。

4. MongoDB连接

标准格式

mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]

mongodb://mongo_admin:AxB6_w3r@localhost/w3r

请参考更多连接实例


三、数据插入

方式一：定义文档 + 插入文档

-- 定义文档
> document=({"user_id" : "ABCDBWN","password" :"ABCDBWN" ,"date_of_join" :
"15/10/2010" ,"education" :"B.C.A." , "profession" : "DEVELOPER","interest" :
"MUSIC","community_name" :["MODERN MUSIC", "CLASSICAL
MUSIC","WESTERN MUSIC"],"community_moder_id" : ["MR. BBB","MR. JJJ","MR
MMM"],"community_members" : [500,200,1500],"friends_id" :
["MMM123","NNN123","OOO123"],"ban_friends_id" :
["BAN123","BAN456","BAN789"]});

-- 插入文档
> db.userdetails.insert(document)

方式二：集合中直接插入数据（无定义文档）

>db.userdetails.insert({"user_id" : "xyz123","password" :"xyz123" ,"date_of_join" : "15/08/2010"});

查看集合中的数据

>db.userdetails.find();


四、MongoDB使用update()函数更新数据

db.collection.update( criteria, objNew, upsert, multi )

update()函数接受以下四个参数：

criteria : update的查询条件，类似sql update查询内where后面的。
objNew : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的
upsert : 这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。
multi : mongodb默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。

只更新第一条记录：
db.test0.update( { "count" : { $gt : 1 } } , { $set : { "test2" : "OK"} } );

全部更新：
db.test0.update( { "count" : { $gt : 3 } } , { $set : { "test2" : "OK"} },false,true );

只添加第一条：
db.test0.update( { "count" : { $gt : 4 } } , { $set : { "test5" : "OK"} },true,false );

全部添加加进去:
db.test0.update( { "count" : { $gt : 5 } } , { $set : { "test5" : "OK"} },true,true );

全部更新：
db.test0.update( { "count" : { $gt : 15 } } , { $inc : { "count" : 1} },false,true );

只更新第一条记录：
db.test0.update( { "count" : { $gt : 10 } } , { $inc : { "count" : 1} },false,false );

五、MongoDB使用remove()函数删除数据

MongoDB remove()函数是用来移除集合中的数据。

MongoDB数据更新可以使用update()函数。在执行remove()函数前先执行find()命令来判断执行的条件是否正确，这是一个比较好的习惯。

使用 remove() 函数移除数据
如果你想移除"userdetails"集合中"user_id" 为 "testuser"的数据你可以执行以下命令：

>db.userdetails.remove( { "user_id" : "testuser" } )

删除所有数据
如果你想删除"userdetails"集合中的所有数据，可以执行以下命令：

>db.userdetails.remove({})

使用drop()删除集合
如果你想删除整个"userdetails"集合，包含所有文档数据，可以执行以下数据：

>db.userdetails.drop()
mongodb-remove-collection

drop()函数返回 true或者false。以上执行结果返回了true，说明操作成功。


使用dropDatabase()函数删除数据库
如果你想删除整个数据库的数据，你可以执行以下命令：

>db.dropDatabase()
执行命令前查看当前使用的数据库是一个良好的习惯，这样可以确保你要删除数据库是正确的，以免造成误操作而产生数据丢失的后果。

六、MongoDB查询

如果你想在集合中读取所有的的数据，可以执行以下命令
>db.userdetails.find();

类似于如下SQL查询语句：
Select * from userdetails;

-- 通过指定条件读取数据

如果我们想在集合"userdetails"中读取"education"为"M.C.A." 的数据，我们可以执行以下命令：
>db.userdetails.find({"education":"M.C.A."})

类似如下SQL查询语句:
Select * from userdetails where education="M.C.A.";

七、MongoDB条件操作符

条件操作符用于比较两个表达式并从mongoDB集合中获取数据。

MongoDB中条件操作符有：

(>) 大于 - $gt
(<) 小于 - $lt
(>=) 大于等于 - $gte
(<= ) 小于等于 - $lte
我们使用的数据库名称为"myinfo" 我们的集合名称为"testtable"，以下为我们插入的数据。

简单的集合"testtable"：

1、 MongoDB (>) 大于操作符 - $gt
如果你想获取"testtable"集合中"age" 大于22的数据，你可以使用以下命令：
>db.testtable.find({age : {$gt : 22}})

类似于SQL语句：
Select * from testtable where age >22;

2、MongoDB（>=）大于等于操作符 - $gte
如果你想获取"testtable"集合中"age" 大于等于22的数据，你可以执行以下命令:
>db.testtable.find({age : {$gte : 22}})

类似于SQL语句：
Select * from testtable where age >=22;

3、MongoDB (<) 小于操作符 - $lt
如果你想获取"testtable"集合中"age" 小于19的数据，你可以执行以下命令：
>db.testtable.find({age : {$lt : 19}})

类似于SQL语句：
Select * from testtable where age <19;

4、MongoDB (<=) 小于操作符 - $lte
如果你想获取"testtable"集合中"age" 小于等于19的数据，你可以执行以下命令：
>db.testtable.find({age : {$lte : 19}})

类似于SQL语句：
Select * from testtable where age <=19;

5、MongoDB 使用 (<) 和 (>) 查询operator - $lt 和 $gt
如果你想获取"testtable"集合中"age" 大于17以及小于24的数据，你可以执行以下命令：

>db.testtable.find({age : {$lt :24, $gt : 17}})
类似于SQL语句：

Select * from testtable where age > 17 and age < 24;


$type操作符是基于BSON类型来检索集合中匹配的结果。
类型:类型值
Double:1
String:2
Object:3
Array:4
Binary data:5
Object id:7
Boolean:8
Date:9
Null:10
Regular expression:11
JavaScript code:13
Symbol:14
JavaScript code with scope:15
32-bit integer:16
Timestamp:17
64-bit integer:18
Min key:255
Max key:127

MongoDB 操作符 - $type 实例
如果想获取 "testtable" 集合包含在 "extra" 中的"friends"为BSON类型的对象，你可以使用以下命令：
> db.testtable.find({"extra.friends" : {$type : 3}})

更多实例
查询所有name字段是字符类型的数据：

db.users.find({name: {$type: 2}});
查询所有age字段是整型的数据：

db.users.find({age: {$type: 16}});


八、MongoDB Limit与Skip方法

1、MongoDB Limit()方法

如果你需要在MongoDB中读取指定数量的数据记录，可以使用MongoDB的Limit方法，limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。

语法

limit()方法基本语法如下所示：

>db.COLLECTION_NAME.find().limit(NUMBER)

>db.mycol.find({},{"title":1,_id:0}).limit(2)
{"title":"MongoDB Overview"}
{"title":"NoSQL Overview"}

2、MongoDB Skip()方法

我们除了可以使用limit()方法来读取指定数量的数据外，还可以使用skip()方法来跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数。

语法

skip() 方法脚本语法格式如下：

>db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)

以上实例只会显示第二条文档数据（相当于mysql数据库中的offset, 从第几条开始）

>db.mycol.find({},{"title":1,_id:0}).limit(1).skip(1)
{"title":"NoSQL Overview"}

九、MongoDB排序

在MongoDB中使用使用sort()方法对数据进行排序，sort()方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排序，而-1是用于降序排列。
语法

sort()方法基本语法如下所示：

>db.COLLECTION_NAME.find().sort({KEY:1})

>db.mycol.find({},{"title":1,_id:0}).sort({"title":-1})
{"title":"Tutorials Point Overview"}
{"title":"NoSQL Overview"}
{"title":"MongoDB Overview"}

注： 如果没有指定sort()方法的排序方式，默认按照文档的升序排序。

十、MongoDB索引

MongoDB 索引

索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。

这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。

索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构

ensureIndex() 方法
MongoDB使用 ensureIndex() 方法来创建索引。

语法

ensureIndex()方法基本语法格式如下所示：
>db.COLLECTION_NAME.ensureIndex({KEY:1})

语法中 Key 值为你要创建的索引字段，1为指定按升序创建索引，如果你想按降序来创建索引指定为-1即可。

实例

>db.mycol.ensureIndex({"title":1})
>
ensureIndex() 方法中你也可以设置使用多个字段创建索引（关系型数据库中称作复合索引）。

>db.mycol.ensureIndex({"title":1,"description":-1})

ensureIndex() 接收可选参数，可选参数列表如下：

Parameter	Type	Description
background	Boolean	建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 "background" 可选参数。 "background" 默认值为false。
unique	Boolean	建立的索引是否唯一。指定为true创建唯一索引。默认值为false.
name	string	索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。
dropDups	Boolean	在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 false.
sparse	Boolean	对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 false.
expireAfterSeconds	integer	指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。
v	index version	索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。
weights	document	索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。
default_language	string	对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语
language_override	string	对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language.
实例

在后台创建索引：

db.values.ensureIndex({open: 1, close: 1}, {background: true})
通过在创建索引时加background:true 的选项，让创建工作在后台执行

十一、MongoDB聚合

MongoDB中聚合(aggregate)主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)。

aggregate() 方法
MongoDB中聚合的方法使用aggregate()。

语法

aggregate() 方法的基本语法格式如下所示：

>db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)

> db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : 1}}}])
{
   "result" : [
      {
         "_id" : "w3cschool.cc",
         "num_tutorial" : 2
      },
      {
         "_id" : "Neo4j",
         "num_tutorial" : 1
      }
   ],
   "ok" : 1
}

以上实例类似sql语句： select by_user, count(*) from mycol group by by_user

在上面的例子中，我们通过字段by_user字段对数据进行分组，并计算by_user字段相同值的总和。

$sum	计算总和。	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : "$likes"}}}])
$avg	计算平均值	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$avg : "$likes"}}}])
$min	获取集合中所有文档对应值得最小值。	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$min : "$likes"}}}])
$max	获取集合中所有文档对应值得最大值。	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$max : "$likes"}}}])
$push	在结果文档中插入值到一个数组中。	db.mycol.aggregate([{$group : {_id : "$by_user", url : {$push: "$url"}}}])
$addToSet	在结果文档中插入值到一个数组中，但不创建副本。	db.mycol.aggregate([{$group : {_id : "$by_user", url : {$addToSet : "$url"}}}])
$first	根据资源文档的排序获取第一个文档数据。	db.mycol.aggregate([{$group : {_id : "$by_user", first_url : {$first : "$url"}}}])
$last	根据资源文档的排序获取最后一个文档数据	db.mycol.aggregate([{$group : {_id : "$by_user", last_url : {$last : "$url"}}}])

管道的概念
管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。

MongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。

表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。

这里我们介绍一下聚合框架中常用的几个操作：

$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。
$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。
$limit：用来限制MongoDB聚合管道返回的文档数。
$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。
$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。
$group：将集合中的文档分组，可用于统计结果。
$sort：将输入文档排序后输出。
$geoNear：输出接近某一地理位置的有序文档。